import requests
import discord
from discord.ext import tasks, commands
import logging
from datetime import datetime
import os
from dotenv import load_dotenv

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# === –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN', '–í–ê–®_–ù–û–í–´–ô_DISCORD_–¢–û–ö–ï–ù_–ó–î–ï–°–¨')
DISCORD_CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID'))  # ID –≤–∞—à–µ–≥–æ Discord –∫–∞–Ω–∞–ª–∞
VK_TOKEN = os.getenv('VK_TOKEN', 'vk1.a.–í–ê–®_–ö–õ–Æ–ß_–°–û–û–ë–©–ï–°–¢–í–ê_–ó–î–ï–°–¨')
VK_GROUP_ID = os.getenv('VK_GROUP_ID', 'your_vk_group')  # –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (domain)
VK_GROUP_ID_2 = os.getenv('VK_GROUP_ID_2')  # –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (domain)
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', 30))  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ (—Å–µ–∫)

logger.info("=== –ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø ===")
logger.info(f"Discord Channel ID: {DISCORD_CHANNEL_ID}")
logger.info(f"VK Group ID: {VK_GROUP_ID}")
logger.info(f"Check interval: {CHECK_INTERVAL} seconds")

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

last_post_id = {}

@bot.slash_command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
async def ping(ctx):
    await ctx.respond("üèì –ü–æ–Ω–≥!", ephemeral=True)

@bot.event
async def on_ready():
    logger.info("üîÑ –°–æ–±—ã—Ç–∏–µ on_ready –≤—ã–∑–≤–∞–Ω–æ!")
    try:
        logger.info(f"=== –ë–û–¢ –£–°–ü–ï–®–ù–û –ü–û–î–ö–õ–Æ–ß–ò–õ–°–Ø –ö DISCORD ===")
        logger.info(f"–ò–º—è –±–æ—Ç–∞: {bot.user}")
        logger.info(f"ID –±–æ—Ç–∞: {bot.user.id}")
        logger.info(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {bot.user.name}")
        logger.info(f"–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä: {bot.user.discriminator}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}")
        for guild in bot.guilds:
            logger.info(f"–°–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        logger.info(f"–ò—â—É –∫–∞–Ω–∞–ª —Å ID: {DISCORD_CHANNEL_ID}")
        channel = bot.get_channel(DISCORD_CHANNEL_ID)
        
        if channel:
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: #{channel.name} (ID: {channel.id})")
            logger.info(f"–¢–∏–ø –∫–∞–Ω–∞–ª–∞: {channel.type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            try:
                permissions = channel.permissions_for(channel.guild.me)
                logger.info(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {permissions}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
                if permissions.send_messages:
                    logger.info("‚úÖ –ü—Ä–∞–≤–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π: –ï–°–¢–¨")
                else:
                    logger.error("‚ùå –ù–ï–¢ –ü–†–ê–í–ê –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π!")
                    
                if permissions.embed_links:
                    logger.info("‚úÖ –ü—Ä–∞–≤–æ –Ω–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫: –ï–°–¢–¨")
                else:
                    logger.warning("‚ö†Ô∏è –ù–ï–¢ –ü–†–ê–í–ê –Ω–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ (—Ñ–æ—Ç–æ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è)")
                    
            except Exception as perm_error:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {perm_error}")
                logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤: {type(perm_error).__name__}")
        else:
            logger.error(f"‚ùå –ö–ê–ù–ê–õ –ù–ï –ù–ê–ô–î–ï–ù! ID: {DISCORD_CHANNEL_ID}")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞")
            logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
            for guild in bot.guilds:
                logger.info(f"–°–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id})")
                for ch in guild.channels:
                    if hasattr(ch, 'name'):
                        logger.info(f"  - #{ch.name} (ID: {ch.id}, —Ç–∏–ø: {ch.type})")
        
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ VK –ø–æ—Å—Ç–æ–≤...")
        if not check_vk_posts.is_running():
            check_vk_posts.start()
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VK –ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!")
        else:
            logger.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VK –ø–æ—Å—Ç–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã...")
        try:
            synced = await bot.tree.sync()
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
        except Exception as sync_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {sync_error}")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ on_ready: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    
    logger.info("üîÑ –°–æ–±—ã—Ç–∏–µ on_ready –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

@tasks.loop(seconds=CHECK_INTERVAL)
async def check_vk_posts():
    global last_post_id
    group_domains = [VK_GROUP_ID]
    if VK_GROUP_ID_2:
        group_domains.append(VK_GROUP_ID_2)

    for domain in group_domains:
        try:
            current_time = datetime.now().strftime("%H:%M:%S")
            logger.info(f"[{current_time}] üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ VK –¥–ª—è {domain}...")

            if not VK_TOKEN or VK_TOKEN.strip() == '':
                logger.error("‚ùå VK TOKEN –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
                continue

            # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –ø–æ domain
            group_url = f'https://api.vk.com/method/groups.getById?group_id={domain}&access_token={VK_TOKEN}&v=5.131'
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ VK API: –ø–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è {domain}")
            resp = requests.get(group_url, timeout=10)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç VK API. –°—Ç–∞—Ç—É—Å: {resp.status_code}")

            if resp.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {resp.status_code}")
                logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {resp.text}")
                continue

            data = resp.json()
            logger.info(f"–û—Ç–≤–µ—Ç VK API –ø–æ–ª—É—á–µ–Ω. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(data.keys())}")

            if 'response' not in data:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê VK API: {data}")
                if 'error' in data:
                    error_code = data['error'].get('error_code')
                    error_msg = data['error'].get('error_msg')
                    logger.error(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")
                    logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_msg}")
                    if error_code == 5:
                        logger.error("‚ùå –ù–ï–í–ï–†–ù–´–ô –¢–û–ö–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VK_TOKEN")
                    elif error_code == 15:
                        logger.error("‚ùå –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–Å–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                    elif error_code == 100:
                        logger.error("‚ùå –ù–ï–í–ï–†–ù–´–ô ID –°–û–û–ë–©–ï–°–¢–í–ê! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ VK_GROUP_ID")
                continue

            group_info = data['response'][0]
            group_id = group_info['id']
            group_name = group_info.get('name', domain)
            group_screen_name = group_info.get('screen_name', domain)
            group_url = f"https://vk.com/{group_screen_name}"
            logger.info(f"ID –≥—Ä—É–ø–ø—ã: {group_id}")

            wall_url = f'https://api.vk.com/method/wall.get?owner_id=-{group_id}&count=1&access_token={VK_TOKEN}&v=5.131'
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–æ–≤: owner_id=-{group_id}")

            wall_resp = requests.get(wall_url, timeout=10)
            if wall_resp.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {wall_resp.status_code}")
                continue

            wall_data = wall_resp.json()
            if 'response' not in wall_data:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê VK API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {wall_data}")
                continue

            posts = wall_data['response']['items']
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")

            if not posts:
                logger.warning("‚ö†Ô∏è –ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                continue

            post = posts[0]
            post_id = post['id']
            post_text = post.get('text', '')[:50] + '...' if len(post.get('text', '')) > 50 else post.get('text', '')
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –æ –≥—Ä—É–ø–ø–µ —Ç–æ–ª—å–∫–æ —Å domain
            group_signature = f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {domain}"

            logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç ID: {post_id}")
            logger.info(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text}")
            logger.info(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π ID: {last_post_id.get(domain)}")

            if last_post_id.get(domain) is None:
                logger.info("üîÑ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ—Ö—Ä–∞–Ω—è—é ID –ø–æ—Å—Ç–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                last_post_id[domain] = post_id
                continue

            if post_id != last_post_id.get(domain):
                logger.info(f"üéâ –ù–û–í–´–ô –ü–û–°–¢ –ù–ê–ô–î–ï–ù! ID: {post_id}")
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Discord...")
                last_post_id[domain] = post_id
                await send_post_to_discord(post, group_signature)
            else:
                logger.info("üì≠ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç")

        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–ê–ô–ú–ê–£–¢ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ VK API")
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–ï–¢–ò –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ VK: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VK: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")

async def send_post_to_discord(post, group_signature):
    logger.info("=== –û–¢–ü–†–ê–í–ö–ê –ü–û–°–¢–ê –í DISCORD ===")
    channel = bot.get_channel(DISCORD_CHANNEL_ID)
    if not channel:
        logger.error(f"‚ùå –ö–ê–ù–ê–õ –ù–ï –ù–ê–ô–î–ï–ù! ID: {DISCORD_CHANNEL_ID}")
        return

    logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: #{channel.name}")

    text = post.get('text', '')
    attachments = post.get('attachments', [])

    logger.info(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {text[:100]}...")
    logger.info(f"–í–ª–æ–∂–µ–Ω–∏–π: {len(attachments)}")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ –≥—Ä—É–ø–ø–µ
    if text:
        text = f"{group_signature}\n{text}"
    else:
        text = group_signature

    embeds = []

    for i, att in enumerate(attachments):
        att_type = att['type']
        logger.info(f"–í–ª–æ–∂–µ–Ω–∏–µ {i+1}: —Ç–∏–ø = {att_type}")

        if att_type == 'photo':
            # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            photo_url = sorted(att['photo']['sizes'], key=lambda x: x['width']*x['height'], reverse=True)[0]['url']
            logger.info(f"–§–æ—Ç–æ URL: {photo_url}")
            embeds.append(discord.Embed().set_image(url=photo_url))
        elif att_type == 'video':
            # –î–ª—è –≤–∏–¥–µ–æ –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ VK
            video = att['video']
            video_url = f"https://vk.com/video{video['owner_id']}_{video['id']}"
            logger.info(f"–í–∏–¥–µ–æ URL: {video_url}")
            text += f"\n[–í–∏–¥–µ–æ]({video_url})"

    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞...")
        if text:
            await channel.send(content=text)
            logger.info("‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            logger.info("–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–∏—è")

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é {len(embeds)} –≤–ª–æ–∂–µ–Ω–∏–π...")
        for i, embed in enumerate(embeds):
            await channel.send(embed=embed)
            logger.info(f"‚úÖ –í–ª–æ–∂–µ–Ω–∏–µ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        logger.info("üéâ –ü–û–°–¢ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù –í DISCORD!")

    except discord.Forbidden:
        logger.error("‚ùå –ù–ï–¢ –ü–†–ê–í –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª")
    except discord.HTTPException as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê DISCORD API: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

@bot.event
async def on_error(event, *args, **kwargs):
    logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í –°–û–ë–´–¢–ò–ò {event}: {args}")
    import traceback
    logger.error(f"Traceback: {traceback.format_exc()}")

@bot.event
async def on_connect():
    logger.info("üîó –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Discord Gateway")

@bot.event
async def on_disconnect():
    logger.warning("üîå –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç Discord Gateway")

@bot.event
async def on_guild_join(guild):
    logger.info(f"üéâ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id})")

@bot.event
async def on_guild_remove(guild):
    logger.warning(f"üëã –ë–æ—Ç —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞: {guild.name} (ID: {guild.id})")

if __name__ == '__main__':
    logger.info("=== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    if not DISCORD_TOKEN or DISCORD_TOKEN == '–í–ê–®_–ù–û–í–´–ô_DISCORD_–¢–û–ö–ï–ù_–ó–î–ï–°–¨':
        logger.error("‚ùå DISCORD_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        exit(1)
    if not VK_TOKEN or VK_TOKEN == 'vk1.a.–í–ê–®_–ö–õ–Æ–ß_–°–û–û–ë–©–ï–°–¢–í–ê_–ó–î–ï–°–¨':
        logger.error("‚ùå VK_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        exit(1)
    try:
        bot.run(DISCORD_TOKEN)
    except discord.LoginFailure:
        logger.error("‚ùå –ù–ï–í–ï–†–ù–´–ô DISCORD TOKEN!")
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: {e}")